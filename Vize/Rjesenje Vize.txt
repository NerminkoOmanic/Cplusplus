



#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <mutex>
#include <regex>


using namespace std;


mutex m;
const char* crt = "\n-----------------------------------------------\n";

enum Status { ZAHTJEV_ZAPRIMLJEN, ODUSTAO, ODBIJENA, IZDATA, ISTEKLA, PONISTENA };
enum Sortiranje { RASTUCI, OPADAJUCI };
enum Drzava { SAD, AUSTRALIJA, ENGLESKA };
const char* DrzavaChar[] = { "SAD", "AUSTRALIJA", "ENGLESKA" };
const char* StatusChar[] = { "ZAHTJEV_ZAPRIMLJEN", "ODUSTAO", "ODBIJENA", "IZDATA", "ISTEKLA", "PONISTENA" };

class Datum {
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum& d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream& operator<< (ostream& COUT, Datum& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}

	bool operator==(Datum& d)
	{
		if (*_dan == *d._dan && *_mjesec == *d._mjesec && *_godina == *d._godina)
			return true;
		return false;
	}
	Datum& operator=(Datum& d)
	{
		if (this != &d)
		{
			delete _dan; delete _mjesec; delete _godina;
			_dan = new int(*d._dan);
			_mjesec = new int(*d._mjesec);
			_godina = new int(*d._godina);
		}
		return *this;
	}
	Datum& operator++()
	{
		if ((*_mjesec == 1 || *_mjesec == 3 || *_mjesec == 5 || *_mjesec == 7 || *_mjesec == 8 || *_mjesec == 10) && *_dan == 31)
		{
			*_dan = 1;
			(*_mjesec)++;
			return *this;
		}
		if ((*_mjesec == 4 || *_mjesec == 6 || *_mjesec == 9 || *_mjesec == 11) && *_dan == 30)
		{
			*_dan = 1;
			(*_mjesec)++;
			return *this;
		}
		if (*_mjesec == 12 && *_dan == 31)
		{
			*_dan = 1;
			*_mjesec = 1;
			(*_godina)++;
			return *this;
		}
		if (*_mjesec == 2 && *_dan == 29)
		{
			*_dan = 1;
			(*_mjesec)++;
			return *this;
		}
		if (*_mjesec == 2 && *_dan == 28 && (*_godina % 4) != 0)
		{
			*_dan = 1;
			(*_mjesec)++;
			return *this;
		}
		(*_dan)++;
		return *this;

	}
	int getAge()
	{
		if (*_mjesec < 8)
			return (2019 - *_godina + 1);
		return (2019 - *_godina);
	}
	int getDateInDays()
	{
		return *_godina * 365 + *_mjesec * 30 + *_dan;
	}
};

template<class T1, class T2, int max>
class FITKolekcija {
	T1* _elementi1[max];
	T2* _elementi2[max];
	int _trenutno;
public:
	FITKolekcija() {
		for (size_t i = 0; i < max; i++) {
			_elementi1[i] = nullptr;
			_elementi2[i] = nullptr;
		}
		_trenutno = 0;
	}
	~FITKolekcija() {
		for (size_t i = 0; i < max; i++) {
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
	}
	T1** GetT1() { return _elementi1; }
	T2** GetT2() { return _elementi2; }
	int GetTrenutno() { return _trenutno; }

	friend ostream& operator<< (ostream& COUT, FITKolekcija& obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << *obj._elementi1[i] << " " << *obj._elementi2[i] << endl;
		return COUT;
	}

	void Dodaj(T1 prvi, T2 drugi)
	{
		if (_trenutno == max)
			throw exception("Kolekcija je puna!!!");
		_elementi1[_trenutno] = new T1(prvi);
		_elementi2[_trenutno] = new T2(drugi);
		_trenutno++;
	}
	void Sortiraj(Sortiranje s)
	{
		if (s == RASTUCI)
		{
			for (size_t i = 0; i < _trenutno - 1; i++)
			{
				for (size_t j = 0; j < _trenutno - (i + 1); j++)
				{
					if (*_elementi1[j] > * _elementi1[j + 1])
					{
						T1 temp1 = *_elementi1[j];
						T2 temp2 = *_elementi2[j];
						*_elementi1[j] = *_elementi1[j + 1];
						*_elementi2[j] = *_elementi2[j + 1];
						*_elementi1[j + 1] = temp1;
						*_elementi2[j + 1] = temp2;
					}
				}
			}
		}
		else if (s == OPADAJUCI)
		{
			for (size_t i = 0; i < _trenutno - 1; i++)
			{
				for (size_t j = 0; j < _trenutno - (i + 1); j++)
				{
					if (*_elementi1[j] < *_elementi1[j + 1])
					{
						T1 temp1 = *_elementi1[j];
						T2 temp2 = *_elementi2[j];
						*_elementi1[j] = *_elementi1[j + 1];
						*_elementi2[j] = *_elementi2[j + 1];
						*_elementi1[j + 1] = temp1;
						*_elementi2[j + 1] = temp2;
					}
				}
			}
		}
	}
};


class Viza {
protected:
	Drzava _drzava;
	Datum _vazenjeOD;
	Datum _vazenjeDO;
	char* _napomena;
	// string se odnosi na razlog promjene statusa, a moguce je samo 10 izmjena statusa
	FITKolekcija<Status, string, 10> _statusi;
public:
	Viza(Drzava drzava, Datum _OD, Datum _DO, char* napomena = nullptr) :_vazenjeDO(_DO), _vazenjeOD(_OD)
	{
		if (napomena != nullptr) {
			_napomena = new char[strlen(napomena) + 1];
			strcpy_s(_napomena, strlen(napomena) + 1, napomena);
		}
		else
			_napomena = nullptr;
		_drzava = drzava;
	}
	Viza(const Viza& v) :_drzava(v._drzava), _vazenjeOD(v._vazenjeOD), _vazenjeDO(v._vazenjeDO), _statusi(v._statusi) {
		if (v._napomena != nullptr) {
			int size = strlen(v._napomena) + 1;
			_napomena = new char[size];
			strcpy_s(_napomena, size, v._napomena);
		}
	}
	~Viza() { delete[] _napomena; _napomena = nullptr; }
	Datum GetVazenjeOD()const { return _vazenjeOD; }
	Datum GetVazenjeDO()const { return _vazenjeDO; }
	char* GetNapomena()const { return _napomena; }
	Drzava GetDrzavu()const { return _drzava; }
	void SetNapomenu(const char* nap)
	{
		if (_napomena != nullptr)
			delete _napomena;

		int size = strlen(nap) + 1;
		_napomena = new char[size];
		strcpy_s(_napomena, size, nap);

	}
	FITKolekcija<Status, string, 10> & GetStatuse() { return _statusi; }
	virtual void Info() = 0;
	bool operator==(Viza& v)
	{
		if (v.GetDrzavu() == _drzava && v.GetVazenjeOD() == _vazenjeOD && v.GetVazenjeDO() == _vazenjeDO)
			return true;
		return false;
	}
	void DodajStatus(Status s, string tekst = "")
	{
		_statusi.Dodaj(s, tekst);
	}
};

class PoslovnaViza :public Viza {
	string _kompanija; //naziv kompanije koja potvrduje da posluje sa aplikantom
public:
	PoslovnaViza(Drzava drzava, Datum _OD, Datum _DO, string kompanija, char* napomena = nullptr) : Viza(drzava, _OD, _DO, napomena) {
		_kompanija = kompanija;
	}
	friend ostream& operator << (ostream& COUT, PoslovnaViza& obj) {
		COUT << obj._drzava << " " << obj._vazenjeOD << " " << obj._vazenjeDO << " " << obj._kompanija << endl;
		COUT << ((obj._napomena != nullptr) ? obj._napomena : "") << endl;
		COUT << "STATUSI -> " << obj._statusi << endl;
		return COUT;

	}
	virtual void Info()
	{
		cout << DrzavaChar[_drzava] << " " << _vazenjeOD << " " << _vazenjeDO << " " << _kompanija << endl;
		cout << ((_napomena != nullptr) ? _napomena : "") << endl;
		cout << "STATUSI -> " << _statusi << endl;
	}
};
class TuristickaViza : public Viza {
	string _adresa; //adresa hotele ili drugog smještaja na kojoj ce aplikant boraviti
public:
	TuristickaViza(Drzava drzava, Datum _OD, Datum _DO, string adresa, char* napomena = nullptr) : Viza(drzava, _OD, _DO, napomena) {
		_adresa = adresa;
	}
	friend ostream& operator << (ostream& COUT, TuristickaViza& obj) {
		COUT << obj._drzava << " " << obj._vazenjeOD << " " << obj._vazenjeDO << " " << obj._adresa << endl;
		COUT << ((obj._napomena != nullptr) ? obj._napomena : "") << endl;
		COUT << "STATUSI -> " << endl << obj._statusi << endl;
		return COUT;

	}
	virtual void Info()
	{
		cout << DrzavaChar[_drzava] << " " << _vazenjeOD << " " << _vazenjeDO << " " << _adresa << endl;
		cout << ((_napomena != nullptr) ? _napomena : "") << endl;
		cout << "STATUSI -> " << _statusi << endl;
	}
};

class Aplikant {
	char* _imePrezime;
	Datum* _datumRodjenja;
	char* _brojPasosa;
	vector<Viza*> _vize;
public:
	Aplikant(const char* imePrezime, Datum datumRodjenja, const char* brPasosa) {
		int vel = strlen(imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imePrezime);
		vel = strlen(brPasosa) + 1;
		_brojPasosa = new char[vel];
		strcpy_s(_brojPasosa, vel, brPasosa);
		_datumRodjenja = new Datum(datumRodjenja);
	}
	~Aplikant() {
		delete[]_imePrezime; _imePrezime = nullptr;
		delete[]_brojPasosa; _brojPasosa = nullptr;
		delete _datumRodjenja; _datumRodjenja = nullptr;
		for (size_t i = 0; i < _vize.size(); i++)
		{
			delete _vize[i]; _vize[i] = nullptr;
		}
	}
	friend ostream& operator << (ostream& COUT, Aplikant& obj) {
		cout << obj._imePrezime << " " << *obj._datumRodjenja << " " << obj._brojPasosa << endl;
		cout << "VIZE -> " << endl;
		for (size_t i = 0; i < obj._vize.size(); i++)
			obj._vize[i]->Info();
		return COUT;
	}

	vector<Viza* > GetVize() { return _vize; }

	bool DodajVizu(Viza* v)
	{
		if (_datumRodjenja->getAge() < 10)
			return false;
		for (size_t i = 0; i < _vize.size(); i++)
		{
			if (_vize[i]->GetDrzavu() == v->GetDrzavu() && (v->GetVazenjeOD().getDateInDays() >= _vize[i]->GetVazenjeOD().getDateInDays() &&
				v->GetVazenjeOD().getDateInDays() <= _vize[i]->GetVazenjeDO().getDateInDays()) ||
				(v->GetVazenjeDO().getDateInDays() >= _vize[i]->GetVazenjeOD().getDateInDays() &&
					v->GetVazenjeDO().getDateInDays() <= _vize[i]->GetVazenjeDO().getDateInDays()))
				for (int j = 0; j < _vize[i]->GetStatuse().GetTrenutno(); j++)
				{
					if (*_vize[i]->GetStatuse().GetT1()[j] == IZDATA)
						return false;
				}
			if (v->GetDrzavu() == SAD && _vize[i]->GetDrzavu() == SAD)
				for (size_t j = 0; j < _vize[i]->GetStatuse().GetTrenutno(); j++)
				{
					if (*_vize[i]->GetStatuse().GetT1()[j] == PONISTENA)
						return false;
				}
		}
		if (dynamic_cast<PoslovnaViza*>(v) != nullptr)
			_vize.push_back(new PoslovnaViza(*dynamic_cast<PoslovnaViza*>(v)));
		else if (dynamic_cast<TuristickaViza*>(v) != nullptr)
			_vize.push_back(new TuristickaViza(*dynamic_cast<TuristickaViza*>(v)));

		return true;


	}
	bool DodajStatus(Viza* v, Status s, string nap = "")
	{
		for (size_t i = 0; i < _vize.size(); i++)
		{
			if (*_vize[i] == *v)
			{
				bool firstLevelStatus = false;
				bool secondLevelStatus = false;

				for (size_t j = 0; j < _vize[i]->GetStatuse().GetTrenutno(); j++)
				{
					if (*_vize[i]->GetStatuse().GetT1()[j] == ZAHTJEV_ZAPRIMLJEN)
						firstLevelStatus = true;
					if (*_vize[i]->GetStatuse().GetT1()[j] == ODBIJENA || *_vize[i]->GetStatuse().GetT1()[j] == ODUSTAO || *_vize[i]->GetStatuse().GetT1()[j] == IZDATA)
						secondLevelStatus = true;
				}
				if (s == ZAHTJEV_ZAPRIMLJEN)
				{
					_vize[i]->DodajStatus(s, nap);
					return true;
				}

				else if ((s == ODBIJENA || s == ODUSTAO || s == IZDATA) && firstLevelStatus)
				{
					_vize[i]->DodajStatus(s, nap);
					return true;
				}

				else if ((s == ISTEKLA || s == PONISTENA) && secondLevelStatus)
				{
					_vize[i]->DodajStatus(s, nap);
					return true;
				}
			}
		}
		return false;
	}
	void PrintajVizu(Viza* v)
	{
		for (size_t i = 0; i < _vize.size(); i++)
		{
			if (*v == *_vize[i])
			{
				thread t([](Viza* v) {

					m.lock();
					cout << crt << endl << "Printam vizu : " << endl;
					v->Info();
					cout << crt;
					this_thread::sleep_for(chrono::seconds(5));
					m.unlock();
				}, _vize[i]);
				t.join();
			}
		}
	}
	vector<Viza*> GetVizeByDrzava(Drzava d, Status s)
	{
		vector<Viza*> temp;
		for (size_t i = 0; i < _vize.size(); i++)
		{

			if (_vize[i]->GetDrzavu() == d)
			{
				bool statusf = false; bool confirmedf = false;
				for (size_t j = 0; j < _vize[i]->GetStatuse().GetTrenutno(); j++)
				{
					if (*_vize[i]->GetStatuse().GetT1()[j] == s)
						statusf = true;
					if (*_vize[i]->GetStatuse().GetT1()[j] == IZDATA)
						confirmedf = true;

				}
				if (statusf && confirmedf)
					temp.push_back(_vize[i]);
			}
		}
		return temp;
	}
	void ZamijeniRijec(string find, string change)
	{
		regex r("(\\b" + find + "\\b)|(\\B" + find + "\\B)");
		for (size_t i = 0; i < _vize.size(); i++)
		{
			for (size_t j = 0; j < _vize[i]->GetStatuse().GetTrenutno(); j++)
			{

				string changeText(*_vize[i]->GetStatuse().GetT2()[j]);
				string changedText = regex_replace(changeText, r, change);
				*_vize[i]->GetStatuse().GetT2()[j] = changedText;
			}
			
		}
	}
};
void main()
{

	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URAÐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOÐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOCNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.
	****************************************************************************/


#pragma region TestDate
	Datum danas(29, 2, 2017);
	Datum sutra(++danas); // inkrementiranjem se uvecava dan za 1
	Datum prekosutra;
	Datum dat15022017(15, 2, 2017), dat18082017(18, 8, 2017), dat11052018(11, 5, 2018), dat11122017(11, 12, 2017);


	prekosutra = danas;
	if (prekosutra == danas)
		cout << "Datumi su jednaki" << endl;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion

#pragma region TestCollection
	int v6 = 6, v13 = 13, v32 = 32, v63 = 63, v98 = 98, v109 = 109, v196 = 196;

	FITKolekcija<int, int, 7> brojevi;
	brojevi.Dodaj(v196, v6);
	brojevi.Dodaj(v13, v32);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v63, v13);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v196, v6);
	brojevi.Dodaj(v6, v109);


	cout << brojevi << crt;
	//NA KOJI NACIN CE SE VRŠITI SORTIRANJE PRVENSTVENO ZAVISI OD VRIJEDNOSTI PARAMETRA, A VRŠI SE NA OSNOVU VRIJEDNOSTI TIPA T1
	brojevi.Sortiraj(RASTUCI);
	cout << brojevi << crt;
	brojevi.Sortiraj(OPADAJUCI);
	cout << brojevi << crt;

	try
	{
		//U SLUCAJU PREKORACENJA DEFINISANE VELICINE KOLEKCIJE, POTREBNO JE BACITI IZUZETAK
		brojevi.Dodaj(v13, v196);
	}
	catch (exception& err)
	{
		cout << "Error -> " << err.what() << endl;
	}
#pragma endregion


	Aplikant jasmin("Jasmin Azemovic", Datum(15, 5, 1979), "BS6985645");
	PoslovnaViza poslovna(SAD, dat15022017, dat18082017, "Microsoft");

	/*
	NOVA VIZA SE NE MOŽE DODATI UKOLIKO:
	- JE APLIKANT MLAÐI OD 10 GODINA
	- U TOM PERIODU (ODNOSI SE NA PERIOD VIZE OD - DO) NE POSTOJI VAŽECA
	(POJAM VAŽECA PODRAZUMIJEVA DA JE POSLJEDNJI STATUS VIZE BIO IZDATA TJ. DA VIZA NIJE PONIŠTENA ILI ISTEKLA) VIZA ZA TU DRŽAVU,
	BEZ OBZIRA NA NJENU VRSTU.
	- JE NEKA OD RANIJIH VIZA PONIŠTENA (OVO SE ODNOSI SAMO NA VIZE ZA DRŽAVU: SAD)
	*/


	if (jasmin.DodajVizu(&poslovna))
		cout << "Podaci o vizi uspjesno zaprimljeni" << endl;


	/*
	STATUSI SE MOGU DODAVATI SAMO U REDOSLIJEDU U KOJEM SE NALAZE U ENUMERACIJI NPR.
	- NIJE MOGUCE ODBITI VIZU AKO PRETHODNO NIJE IMALA STATUS DA JE ZAHTJEV_ZAPRIMLJEN;
	- NIJE MOGUCE PONIŠTITI VIZU KOJA PRETHODNO NIJE IZDATA
	*/

	if (jasmin.DodajStatus(&poslovna, ZAHTJEV_ZAPRIMLJEN, "provjeriti navode sa predstavnicima kompanije Microsoft"))
		cout << "Status vize uspijesno promijenjen" << endl;
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;


	if (jasmin.DodajStatus(&poslovna, ODBIJENA, "predstavnicima kompanije Microsoft nemaju informaciju o posjeti navedenog aplikanta"))
		cout << "Status vize uspijesno promijenjen" << endl;
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;

	TuristickaViza turisticka(ENGLESKA, dat18082017, dat11122017, "Whitehall Pl, London SW1A 2BD, UK");
	jasmin.DodajVizu(&turisticka);

	if (jasmin.DodajStatus(&turisticka, ZAHTJEV_ZAPRIMLJEN))
		cout << "Status vize uspijesno promijenjen" << endl;
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;

	if (jasmin.DodajStatus(&turisticka, IZDATA)) {
		cout << "Status vize uspijesno promijenjen" << endl;
		//U ZASEBNOJ NITI URADITI PRINTANJE VIZE...KORISTITI METODU SLEEP_FOR
		jasmin.PrintajVizu(&turisticka);
	}
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;
	//VRACA PODATKE O SVIM VIZAMA KOJE SU IZDATE ZA ODREÐENU DRŽAVU, A KOJE SU IMALE ODREÐENI STATUS
	vector<Viza*> jasminVize = jasmin.GetVizeByDrzava(SAD, PONISTENA);

	//UNUTAR NAPOMENE MIJENJA SADRŽAJ "nemaju informaciju" SA "su upoznati sa" - KORISTITI REGEX
	jasmin.ZamijeniRijec("nemaju informaciju", "su upoznati");

	cout << jasmin;
	system("pause>0");

}