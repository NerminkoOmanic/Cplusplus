#include<iostream>
#include<vector>
#include<string>
#include<iterator>
#include<regex>
#include<thread>
#include<mutex>

using namespace std;

const char* crt = "\n---------------------------------------\n";
mutex m;

class DatumVrijeme {
	int* _dan, * _mjesec, * _godina, * _sati, * _minuti;
public:
	DatumVrijeme(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 0, int minuti = 0) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);

	}
	DatumVrijeme(DatumVrijeme& d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
		_sati = new int(*d._sati);
		_minuti = new int(*d._minuti);
	}
	~DatumVrijeme() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;

	}
	DatumVrijeme &operator =( const DatumVrijeme &d)
	{
		if (this != &d)
		{
			_dan = new int(*d._dan);
			_mjesec = new int(*d._mjesec);
			_godina = new int(*d._godina);
			_sati = new int(*d._sati);
			_minuti = new int(*d._minuti);
		}
		return *this;
	}
	friend ostream& operator<< (ostream& COUT, DatumVrijeme& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina << " " << *obj._sati << ":" << *obj._minuti;
		return COUT;
	}
	bool operator==(DatumVrijeme& d)
	{
		if (*_dan == *d._dan && *_mjesec == *d._mjesec && *_godina == *d._godina && *_sati == *d._sati && *_minuti == *d._minuti)
			return true;
		return false;
	}
};

template<class T1, class T2 = int>
class FITKolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
public:
	FITKolekcija() {
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = 0;
	}
	~FITKolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;
	}
	T1* GetT1() { return _elementi1; }
	T2* GetT2() { return _elementi2; }
	int GetTrenutno() { return _trenutno; }

	friend ostream& operator<< (ostream& COUT, FITKolekcija& obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << obj._elementi1[i] << " " << obj._elementi2[i] << endl;
		return COUT;
	}
	void Dodaj(T1 el1,T2 el2)
	{
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];

		for (size_t i = 0; i < _trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		temp1[_trenutno] = el1;
		temp2[_trenutno] = el2;

		_elementi1 = temp1;
		_elementi2 = temp2;
		_trenutno++;
	}
	void Sortiraj() 
	{
		for (size_t i = 0; i < _trenutno - 1; i++)
		{
			for (size_t j = 0; j < _trenutno -(i+1); j++)
			{
				if (_elementi1[j]>_elementi1[j+1])
				{
					T1 temp1 = _elementi1[j];
					T2 temp2 = _elementi2[j];

					_elementi1[j] = _elementi1[j + 1];
					_elementi2[j] = _elementi2[j + 1];
					
					_elementi1[j + 1] = temp1;
					_elementi2[j + 1] = temp2;

				}
			}
		}
	}
	FITKolekcija<int, int>* GetJedinstveni()
	{
		FITKolekcija<int, int>* jed = new FITKolekcija();
		bool pronadjen = false;

		for (size_t i = 0; i < _trenutno; i++)
		{
			pronadjen = false;
			for (size_t j = 0; j < jed->GetTrenutno(); j++)
			{
				if (_elementi1[i] == jed->GetT1()[j] && _elementi2[i] == jed->GetT2()[j])
				{
					pronadjen = true;
					break;
				}
			}
			if(!pronadjen)
			jed->Dodaj(_elementi1[i], _elementi2[i]);

		}
		return jed;
	}
	void DodajNaLokaciju(T1 el1, T2 el2, int lokacija)
	{
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];

		for (size_t i = 0; i <_trenutno+1; i++)
		{
			if (i < lokacija)
			{
				temp1[i] = _elementi1[i];
				temp2[i] = _elementi2[i];
			}
			if (i == lokacija)
			{
				temp1[i] = el1;
				temp2[i] = el2;

			}
			if (i > lokacija)
			{
				temp1[i] = _elementi1[i-1];
				temp2[i] = _elementi2[i-1];
			}
		}
		if (_elementi1 != nullptr)
		{
			delete[] _elementi1; _elementi1 = nullptr;
			delete[] _elementi2; _elementi2 = nullptr;
		}
	
		_elementi1 = temp1;
		_elementi2 = temp2;
		_trenutno++;
	}
	void UkloniElement(int lokacija)
	{	

		T1* temp1 = new T1[_trenutno - 1];
		T2* temp2 = new T2[_trenutno - 1];

		for (size_t i = 0; i < _trenutno - 1; i++)
		{
			if (i < lokacija)
			{
				temp1[i] = _elementi1[i];
				temp2[i] = _elementi2[i];
			}
			if (i >= lokacija)
			{
				temp1[i] = _elementi1[i + 1];
				temp2[i] = _elementi2[i + 1];
			}
		}
		if (_elementi1 != nullptr)
		{
			delete[] _elementi1; _elementi1 = nullptr;
			delete[] _elementi2; _elementi2 = nullptr;
		}
		_elementi1 = temp1;
		_elementi2 = temp2;
		_trenutno--;

	}


};

enum vrstaDokumenta { PDF, DOC, TXT, HTML };

class Dokument {
	vrstaDokumenta _vrsta;
	string _naziv;
	string _sadrzaj;
	int _brojStranica;
public:
	Dokument() { _brojStranica = 0; }
	Dokument(vrstaDokumenta vrsta, string naziv) {
		_naziv = naziv; _vrsta = vrsta; _brojStranica = 0;
	}
	string GetNaziv() { return _naziv; };
	string GetSadrzaj() { return _sadrzaj; };
	vrstaDokumenta GetVrsta() { return _vrsta; };
	void UvecajBrojStranica() { _brojStranica++; }
	int GetBrojStranica() { return _brojStranica; }
	friend ostream& operator<<(ostream& COUT, Dokument& obj) {
		COUT << obj._naziv << "." << obj._vrsta << " (" << obj._brojStranica << ")\n" << obj._sadrzaj << endl;
		return COUT;
	}
	void DodajSadrzaj(string sadrzaj)
	{
		_sadrzaj += sadrzaj;
		int brojstr = sadrzaj.length() / 30;
		if (sadrzaj.length() % 30 != 0)
			brojstr++;
		_brojStranica += brojstr;
	}
};
class Uredjaj {
protected:
	char* _proizvodjac;
	char* _model;
public:
	Uredjaj(const char* proizvodjac,const char* model) {
		int vel = strlen(proizvodjac) + 1;
		_proizvodjac = new char[vel];
		strcpy_s(_proizvodjac, vel, proizvodjac);
		vel = strlen(model) + 1;
		_model = new char[vel];
		strcpy_s(_model, vel, model);
	}
	~Uredjaj() {
		delete[] _proizvodjac; _proizvodjac = nullptr;
		delete[] _model; _model = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, Uredjaj& obj) {
		COUT << obj._proizvodjac << "." << obj._model << endl;
		return COUT;
	}
};
class Printer: public Uredjaj {
	FITKolekcija<DatumVrijeme, Dokument> _printaniDokumenti;
	vector<string> _zabranjeneRijeci;
public:
	Printer(const char* proiz, const char* model):Uredjaj(proiz,model)
	{
		
	}
	FITKolekcija<DatumVrijeme, Dokument>& GetPrintaniDokumenti() { return _printaniDokumenti; };
	vector<string>& GetZabranjeneRijeci() { return _zabranjeneRijeci; };
	void InfoZabranjene()
	{
		for (size_t i = 0; i < _zabranjeneRijeci.size(); i++)
		{
			cout << _zabranjeneRijeci[i] << endl;
		}
	}
	void DodajZabranjenuRijec(string s)
	{
		bool pronadjen = false;
		for (vector<string>::iterator i = _zabranjeneRijeci.begin(); i != _zabranjeneRijeci.end(); i++)
		{
			if (*i == s)
				pronadjen = true;
		}
		if(!pronadjen)
		_zabranjeneRijeci.push_back(s);
	}
	bool ProvjeriPrintanje(Dokument& dok)
	{

		for (size_t i = 0; i < _zabranjeneRijeci.size(); i++)
		{
			if (dok.GetSadrzaj().find(_zabranjeneRijeci[i]) != string::npos)
			{

				return false;
			}
		}
		return true;
	}
	void Printaj(DatumVrijeme dv, Dokument &dok )
	{
	
		regex r("[a-zA-Z]{5,15}[.](pdf|doc|txt|html)");

		if (!regex_match(dok.GetNaziv(), r))
			throw exception("Naziv nije validan !!!");

		_printaniDokumenti.Dodaj(dv, dok);

		if (!ProvjeriPrintanje(dok))
			throw exception("Sadrzi zabranjene rijeci!!!");

		thread t1([&dok]()
			{
				m.lock();
				this_thread::sleep_for(chrono::seconds(3));
				cout << "Printam -> " << dok.GetNaziv() << endl << dok.GetSadrzaj() << endl;
				m.unlock();
			});
		t1.join();
	}
	float GetProsjecanBrojStranicaPoDatumu(DatumVrijeme d)
	{
		float prosjek = 0;
		int brojDoc = 0;
		for (size_t i = 0; i < _printaniDokumenti.GetTrenutno(); i++)
		{
			if (_printaniDokumenti.GetT1()[i] == d)
			{
				prosjek += _printaniDokumenti.GetT2()[i].GetBrojStranica();
				brojDoc++;
			}
		}
		prosjek /= brojDoc;
		return prosjek;
	}
	string GetTopZabranjenuRijec()
	{
		int brojacMax = 0;
		string maxRijec = "";

		for (vector<string>::iterator i = _zabranjeneRijeci.begin(); i != _zabranjeneRijeci.end(); i++)
		{
			int brojac = 0;
			string rijec = *i;

			for (size_t j = 0; j < _printaniDokumenti.GetTrenutno(); j++)
			{
				regex r(*i);
				string sadrzaj = _printaniDokumenti.GetT2()[j].GetSadrzaj();
				auto start = sregex_iterator(sadrzaj.begin(), sadrzaj.end(), r);
				auto end = sregex_iterator();
				brojac += distance(start, end);
			}
			if (brojac > brojacMax)
			{
				brojacMax = brojac;
				maxRijec = rijec;
			}
		}
		return maxRijec;
	}
	void UkloniDokumente()
	{
		cout << _printaniDokumenti.GetTrenutno() << endl;
		for (size_t i = 0; i < _printaniDokumenti.GetTrenutno(); i++)
		{
			if (!ProvjeriPrintanje(_printaniDokumenti.GetT2()[i]))
			{
				
				_printaniDokumenti.UkloniElement(i);
				i--;
			}
		}
		cout << _printaniDokumenti.GetTrenutno() << endl;

	}
};

void main()
{
	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOĐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
	****************************************************************************/

#pragma region TestiranjeDatumVrijeme
	DatumVrijeme danas(1, 2, 2017, 10, 15);
	DatumVrijeme sutra(danas);
	DatumVrijeme prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion
#pragma region FITKolekcija
	int v6 = 6, v13 = 13, v32 = 32, v63 = 63, v98 = 98, v109 = 109, v196 = 196;
	
	FITKolekcija<int, int> brojevi;
	brojevi.Dodaj(v196, v6);
	brojevi.Dodaj(v13, v32);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v63, v13);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v196, v6);
	
	cout << brojevi << crt;
	//SORTIRANJE ČLANOVA KOLEKCIJE SE VRŠI U RASTUĆEM REDOSLIJEDU NA OSNOVU VRIJEDNOSTI ELEMENTA TIPA T1
	brojevi.Sortiraj();
	cout << brojevi << crt;
	//BROJ 2 SE ODNOSI NA LOKACIJU/INDEKS UNUTAR LISTE NA KOJI JE POTREBNO DODATI NOVE ELEMENTE
	brojevi.DodajNaLokaciju(v109, v6, 2);
	cout << brojevi << crt;
	brojevi.Sortiraj();
	cout << brojevi << crt;
	cout << "prije jedinstvenog" << endl;
	/*METODA GetJedinstveni VRAĆA LISTU JEDINSTVENIH ELEMENATA TJ. ELEMENATA KOJI NE SADRŽE DUPLIKATE (POJAM DUPLIKAT SE ODNOSI NA ISTE VRIJEDNOSTI ELEMENATA T1 I T2). 
	ELEMENTI KOJI SE DUPLIRAJU SE U OVOJ LISTI TREBAJU POJAVITI SAMO JEDNOM.*/
	FITKolekcija<int, int>* jedinstveni = brojevi.GetJedinstveni();
	cout << *jedinstveni << crt;
	*jedinstveni = brojevi;
	cout << *jedinstveni << crt;
	
	Dokument ispitPRIII(DOC, "ispitPRIII.doc");
	//BROJ STRANICA DOKUMENTA SE AUTOMATSKI ODREĐUJE PRILIKOM DODAVANJA SADRŽAJA. ZA POTREBE ISPITA PRETPOSTAVLJAMO DA NA JEDNU STRANICU MOŽE STATI 30 ZNAKOVA UKLJUČUJUĆI I RAZMAKE
	ispitPRIII.DodajSadrzaj("NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO RE");
	cout << "Broj stranica -> " << ispitPRIII.GetBrojStranica() << endl;
	Dokument ispitBaze(DOC, "ispitBaze.doc");
	ispitBaze.DodajSadrzaj("PROGRAMSKI CODE SE TAKOĐER NALAZI U FAJLU CODE.TXT RE");
	cout << ispitBaze << endl;//ISPISUJE SVE DOSTUPNE PODATKE O DOKUMENTU

	Printer hp3200("HP", "3200");
	//PRINTER NEĆE DOZVOLITI PRINTANJE DOKUMENATA U ČIJEM SADRŽAJU SE NALAZI NEKA OD ZABRANJENIH RIJEČI
	hp3200.DodajZabranjenuRijec("RE");// :)
	hp3200.DodajZabranjenuRijec("RAT");
	hp3200.DodajZabranjenuRijec("UBITI");
	hp3200.DodajZabranjenuRijec("RE");// ONEMOGUĆITI PONAVLJANJE ZABRANJENIH RIJEČI, KORISTITI ITERATORE
	hp3200.DodajZabranjenuRijec("MRZITI");
	
		/*
		DA BI PRINTER ISPRINTAO NEKI DOKUMENT MORAJU BITI ZADOVOLJENA SLJEDEĆA PRAVILA:
		1. NAZIV DOKUMENTA MORA BITI U SLJEDEĆEM FORMATU npr: ispitPRIII.doc
		NAZIV DOKUMENTA MOŽE SADRŽAVATI SAMO SLOVA (NAJMANJE 5, NAJVIŠE 15), A EKSTENZIJA MOŽE
		BITI SAMO NEKA OD DOZVOLJENIH VRSTOMDOKUMENTA
		2. SADRŽAJ DOKUMENTA U SEBI NE SMIJE POSJEDOVATI NITI JEDNU ZABRANJENU RIJEČ
		UKOLIKO NEKI OD NAVEDENIH USLOVA NIJE ZADOVOLJEN FUNKCIJA TREBA DA BACI EXCEPTION SA
		ODGOVARAJUĆOM PORUKOM, ALI ĆE DOKUMENT BITI POHRANJEN U KOLEKCIJU _printaniDokumenti.
		UKOLIKO DOKUMENT ISPUNJAVA SVE USLOVE ZA PRINTANJE POTREBNO JE NA KONZOLU ISPISATI
		SADRŽAJ DOKUMENTA KOJI SE PRINTA

		
		IMPLEMENTIRATI PRINTANJE U ZASEBNIM NITIMA UZ KORIŠTENJE sleep_for FUNKCIJE
		VODITI RAČUNA O DIJELJENJU ZAJEDNIČKIH RESURSA
		*/
	
	try
	{	
		hp3200.Printaj(danas, ispitPRIII);
	}
	catch (exception& err)
	{
		cout << err.what() << endl;
	}
	try
	{
		hp3200.Printaj(danas, ispitBaze);
	}
	catch (exception& err)
	{
		cout << err.what() << endl;
	}

	
	//KOD POREĐENJA DATUMA PRINTANJA NIJE POTREBNO POREDITI MINUTE, SAMO DATUM I SATE
	cout << "Prosjecan broj printanih stranica za " << danas << " je -> " << hp3200.GetProsjecanBrojStranicaPoDatumu(danas) << crt;
	cout << "Najcesce koristena zabranjena rijec je -> " << hp3200.GetTopZabranjenuRijec() << crt;

	Printer hp4000(hp3200);
	cout << "Prosjecan broj printanih stranica za " << danas << " je -> " << hp4000.GetProsjecanBrojStranicaPoDatumu(danas) << crt;
	cout << "Najcesce koristena zabranjena rijec je -> " << hp4000.GetTopZabranjenuRijec() << crt;
	hp4000.UkloniDokumente();//UKLANJA SVE DOKUMENTE KOJI NISU ZADOVOLJILI USLOVE ZA PRINTANJE
	cout << hp4000 << crt;
	
#pragma endregion
}